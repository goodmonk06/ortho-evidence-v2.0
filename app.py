import streamlit as st

# „Éö„Éº„Ç∏Ë®≠ÂÆöÔºà„Åì„ÅÆ„Ç≥„Éº„Éâ„ÅØÂøÖ„ÅöÊúÄÂàù„ÅÆStreamlitÂëΩ‰ª§„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„ÅôÔºâ
st.set_page_config(
    page_title="Ê≠ØÁßëÁüØÊ≠£„Ç®„Éì„Éá„É≥„ÇπÁîüÊàê„Ç∑„Çπ„ÉÜ„É†",
    page_icon="ü¶∑",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‰ªñ„ÅÆ„É©„Ç§„Éñ„É©„É™„Çí„Ç§„É≥„Éù„Éº„Éà
import sys
import os
import pandas as pd
import numpy as np
from datetime import date
import re
import base64
import logging
import sqlite3
import json
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

# „Ç´„Çπ„Çø„É†„É¢„Ç∏„É•„Éº„É´„Çí„Ç§„É≥„Éù„Éº„Éà
from evidence_processor import OrthoEvidenceProcessor

# „É≠„ÇÆ„É≥„Ç∞Ë®≠ÂÆö
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("ortho_evidence_app.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("ortho_evidence_app")

# „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†± - Êú¨Áï™Áí∞Â¢É„Åß„ÅØÂâäÈô§„Åæ„Åü„ÅØ„Ç≥„É°„É≥„Éà„Ç¢„Ç¶„Éà„Åô„Çã
# st.write("Python version:", sys.version)
# st.write("Working directory contents:")
# st.write(os.listdir())

# „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
if 'processor' not in st.session_state:
    try:
        # SQLite„Éá„Éº„Çø„Éô„Éº„Çπ„Å∏„ÅÆ„Éë„Çπ
        db_path = "ortho_evidence.db"
        
        # „Éá„Éº„Çø„Éô„Éº„Çπ„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
        db_exists = os.path.exists(db_path)
        
        # „Ç®„Éì„Éá„É≥„ÇπÂá¶ÁêÜ„É¢„Ç∏„É•„Éº„É´„ÅÆÂàùÊúüÂåñ
        processor = OrthoEvidenceProcessor(db_path)
        
        # Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„Éº„Éû„ÇíÂàùÊúüÂåñ
        if not db_exists:
            processor.initialize_db("db_schema.sql")
            st.info("Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü„ÄÇ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ")
        
        st.session_state['processor'] = processor
    except Exception as e:
        st.error(f"„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
        logger.error(f"„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
# HTML„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åô„ÇãÈñ¢Êï∞
def generate_html_report(age, gender, issue_ids, issue_names, necessity_score, scenarios, economic_benefits, additional_notes=""):
    processor = st.session_state['processor']
    
    today = date.today().strftime("%YÂπ¥%mÊúà%dÊó•")
    
    # „É™„Çπ„ÇØ„Éó„É≠„Éï„Ç°„Ç§„É´„ÅÆÂèñÂæó
    risk_profiles_df = processor.get_age_risk_profiles()
    applicable_profile = risk_profiles_df[risk_profiles_df['age_threshold'] >= age].iloc[0] if not risk_profiles_df.empty else None
    
    # ÂïèÈ°åÂà•„ÅÆÂäπÊûú„Éá„Éº„Çø„ÇíÂèñÂæó
    effects_data = {}
    high_risks = []
    
    for issue_id in issue_ids:
        effects_df = processor.get_issue_treatment_effects(issue_id)
        if not effects_df.empty:
            effects_data[issue_id] = effects_df
            
            # È´ò„É™„Çπ„ÇØÈ†ÖÁõÆ„ÅÆÊäΩÂá∫
            risk_effects = effects_df[effects_df['effect_direction'] == 'increase']
            for _, row in risk_effects.iterrows():
                if row['effect_value'] > 30:  # 30%‰ª•‰∏ä„ÅÆ„É™„Çπ„ÇØÂ¢óÂä†„ÇíÈ´ò„É™„Çπ„ÇØ„Å®„Åô„Çã
                    high_risks.append(f"{row['issue_name_ja']}: {row['description_ja']}")
    
    # ÁüØÊ≠£ÂøÖË¶ÅÊÄß„Çπ„Ç≥„Ç¢„ÅÆËâ≤„ÇíË®≠ÂÆö
    if necessity_score["total_score"] >= 80:
        score_color = "#ff4444"  # Ëµ§ÔºàÁ∑äÊÄ•Ôºâ
    elif necessity_score["total_score"] >= 60:
        score_color = "#ff8800"  # „Ç™„É¨„É≥„Ç∏ÔºàÈ´òÔºâ
    elif necessity_score["total_score"] >= 40:
        score_color = "#ffbb33"  # ÈªÑËâ≤Ôºà‰∏≠Ôºâ
    else:
        score_color = "#00C851"  # Á∑ëÔºà‰ΩéÔºâ
    
    # HTML„Éò„ÉÉ„ÉÄ„Éº
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Ê≠ØÁßëÁüØÊ≠£Ë©ï‰æ°„É¨„Éù„Éº„Éà</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
            }}
            h1, h2, h3 {{
                color: #0066cc;
                border-bottom: 1px solid #ddd;
                padding-bottom: 5px;
            }}
            h1 {{
                text-align: center;
                border-bottom: 2px solid #0066cc;
            }}
            .header-info {{
                text-align: center;
                margin-bottom: 20px;
            }}
            .section {{
                margin: 25px 0;
                padding: 0 15px;
            }}
            .risk-item {{
                margin: 10px 0;
                padding: 10px;
                border-left: 3px solid #ddd;
            }}
            .high-risk {{
                background-color: #ffeeee;
                border-left: 3px solid #ff4444;
            }}
            .warning {{
                background-color: #fff3cd;
                padding: 10px;
                border-left: 4px solid #ffc107;
                margin: 15px 0;
            }}
            .benefit {{
                background-color: #e8f4f8;
                padding: 10px;
                border-left: 4px solid #0099cc;
            }}
            .necessity-score {{
                text-align: center;
                margin: 30px auto;
                max-width: 400px;
            }}
            .score-display {{
                font-size: 36px;
                font-weight: bold;
                color: white;
                background-color: {score_color};
                border-radius: 50%;
                width: 120px;
                height: 120px;
                line-height: 120px;
                margin: 0 auto;
                text-align: center;
            }}
            .score-interpretation {{
                margin-top: 15px;
                font-weight: bold;
                font-size: 18px;
            }}
            .score-details {{
                display: flex;
                justify-content: space-between;
                margin-top: 20px;
                text-align: center;
            }}
            .score-component {{
                flex: 1;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
                margin: 0 5px;
            }}
            .component-value {{
                font-weight: bold;
                font-size: 24px;
                color: #0066cc;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
            }}
            th, td {{
                padding: 8px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }}
            th {{
                background-color: #f2f2f2;
            }}
            .comparison-table td {{
                vertical-align: top;
            }}
            .comparison-table td:first-child {{
                font-weight: bold;
                width: 20%;
            }}
            .comparison-good {{
                background-color: #e8f5e9;
                border-left: 4px solid #4caf50;
            }}
            .comparison-bad {{
                background-color: #ffebee;
                border-left: 4px solid #f44336;
            }}
            .economic-benefit {{
                display: flex;
                flex-direction: column;
                align-items: center;
                margin: 30px 0;
                padding: 20px;
                background-color: #e8f5e9;
                border-radius: 10px;
            }}
            .economic-numbers {{
                display: flex;
                justify-content: space-around;
                width: 100%;
                margin: 20px 0;
            }}
            .economic-item {{
                text-align: center;
                padding: 10px;
            }}
            .economic-value {{
                font-size: 24px;
                font-weight: bold;
                color: #2e7d32;
            }}
            .economic-label {{
                font-size: 14px;
                color: #555;
            }}
            .footer {{
                margin-top: 40px;
                border-top: 1px solid #ddd;
                padding-top: 10px;
                font-size: 0.8em;
                text-align: center;
                color: #666;
            }}
            .evidence-badge {{
                margin: 10px 0;
                padding: 10px;
                border-radius: 4px;
                background-color: #f9f9f9;
                border-left: 4px solid #0066cc;
            }}
            .evidence-level {{
                font-weight: bold;
                font-size: 14px;
            }}
            .evidence-type {{
                font-size: 12px;
                color: #666;
            }}
            @media print {{
                body {{
                    font-size: 12pt;
                }}
                .no-print {{
                    display: none;
                }}
                h1, h2, h3 {{
                    page-break-after: avoid;
                }}
                .section {{
                    page-break-inside: avoid;
                }}
            }}
        </style>
    </head>
    <body>
        <h1>Ê≠ØÁßëÁüØÊ≠£Ë©ï‰æ°„É¨„Éù„Éº„Éà</h1>
        <div class="header-info">
            <p><strong>ÁîüÊàêÊó•:</strong> {today}</p>
            <p><strong>ÊÇ£ËÄÖÊÉÖÂ†±:</strong> {age}Ê≠≥, {gender}</p>
    """
    
    # ËøΩÂä†„É°„É¢„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
    if additional_notes:
        html += f'<p><strong>ÁâπË®ò‰∫ãÈ†Ö:</strong> {additional_notes}</p>'
    
    html += '</div>'
    
    # ÁüØÊ≠£ÂøÖË¶ÅÊÄß„Çπ„Ç≥„Ç¢
    html += f'''
    <div class="section">
        <h2>ÁüØÊ≠£ÂøÖË¶ÅÊÄß„Çπ„Ç≥„Ç¢</h2>
        <div class="necessity-score">
            <div class="score-display">{necessity_score["total_score"]}</div>
            <div class="score-interpretation">{necessity_score["interpretation"]}</div>
            <div class="score-details">
                <div class="score-component">
                    <div class="component-value">{necessity_score["timing_score"]}</div>
                    <div>„Çø„Ç§„Éü„É≥„Ç∞<br>„Çπ„Ç≥„Ç¢</div>
                </div>
                <div class="score-component">
                    <div class="component-value">{necessity_score["severity_score"]}</div>
                    <div>ÂïèÈ°åÈáçÂ§ßÂ∫¶<br>„Çπ„Ç≥„Ç¢</div>
                </div>
                <div class="score-component">
                    <div class="component-value">{necessity_score["risk_score"]}</div>
                    <div>Â∞ÜÊù•„É™„Çπ„ÇØ<br>„Çπ„Ç≥„Ç¢</div>
                </div>
            </div>
        </div>
    </div>
    '''
    
    # È´ò„É™„Çπ„ÇØÈ†ÖÁõÆ„ÅÆ„Çµ„Éû„É™„Éº
    if high_risks:
        html += '''
        <div class="section">
            <h2>Ê≥®ÊÑè„Åô„Åπ„ÅçÈ´ò„É™„Çπ„ÇØÈ†ÖÁõÆ</h2>
        '''
        for risk in high_risks:
            html += f'<div class="risk-item high-risk">{risk}</div>'
        html += '</div>'
    
    # ÁüØÊ≠£„Çø„Ç§„Éü„É≥„Ç∞Ë©ï‰æ°
    timing_benefits = processor.get_age_timing_benefits()
    applicable_timing = None
    
    for _, row in timing_benefits.iterrows():
        if row['age_min'] <= age <= row['age_max']:
            applicable_timing = row
            break
    
    if applicable_timing is not None:
        html += f'''
        <div class="section">
            <h2>ÁüØÊ≠£„Çø„Ç§„Éü„É≥„Ç∞Ë©ï‰æ°</h2>
            <p><strong>ÁèæÂú®„ÅÆÂπ¥ÈΩ¢„Ç∞„É´„Éº„Éó:</strong> {applicable_timing['age_group_ja']}</p>
            <p><strong>Êé®Â•®„É¨„Éô„É´:</strong> {applicable_timing['recommendation_level']}</p>
            <p><strong>„É°„É™„ÉÉ„Éà:</strong> {applicable_timing['benefit_text_ja']}</p>
        '''
        
        # „Çø„Ç§„Éü„É≥„Ç∞Ë≠¶ÂëäÔºàÂπ¥ÈΩ¢„Å´Âü∫„Å•„Åè„É™„Çπ„ÇØÔºâ
        if applicable_profile is not None:
            html += f'<div class="warning"><strong>‚ö†Ô∏è ÁüØÊ≠£„Çø„Ç§„Éü„É≥„Ç∞Ë≠¶Âëä:</strong> {applicable_profile["description_ja"]}</div>'
        
        html += '</div>'
    
    # ÁµåÊ∏àÁöÑ„É°„É™„ÉÉ„Éà
    html += f'''
    <div class="section">
        <h2>Ê≠ØÂàóÁüØÊ≠£„ÅÆÁµåÊ∏àÁöÑ„É°„É™„ÉÉ„Éà</h2>
        <div class="economic-benefit">
            <p>Ê≠ØÂàóÁüØÊ≠£„ÅØÂÅ•Â∫∑„Å∏„ÅÆÊäïË≥á„Åß„Åô„ÄÇ‰ªäÁüØÊ≠£„Åô„Çã„Åì„Å®„Åß„ÄÅÁîüÊ∂Ø„Å´„Çè„Åü„Å£„Å¶‰ª•‰∏ã„ÅÆÁµåÊ∏àÁöÑ„É°„É™„ÉÉ„Éà„ÅåÊúüÂæÖ„Åß„Åç„Åæ„ÅôÔºö</p>
            <div class="economic-numbers">
                <div class="economic-item">
                    <div class="economic-value">¬•{economic_benefits["current_cost"]:,}</div>
                    <div class="economic-label">ÁèæÂú®„ÅÆÁüØÊ≠£„Ç≥„Çπ„Éà</div>
                </div>
                <div class="economic-item">
                    <div class="economic-value">¬•{economic_benefits["future_savings"]:,}</div>
                    <div class="economic-label">Â∞ÜÊù•„ÅÆÂåªÁôÇË≤ªÂâäÊ∏õÈ°ç</div>
                </div>
                <div class="economic-item">
                    <div class="economic-value">¬•{economic_benefits["net_benefit"]:,}</div>
                    <div class="economic-label">ÁîüÊ∂Ø„ÅÆÁ¥îÁØÄÁ¥ÑÈ°ç</div>
                </div>
            </div>
            <p><strong>ÊäïË≥áÂèéÁõäÁéá: {economic_benefits["roi"]}%</strong>ÔºàÁüØÊ≠£Ë≤ªÁî®„Å´ÂØæ„Åô„ÇãÈï∑ÊúüÁöÑ„É™„Çø„Éº„É≥Ôºâ</p>
            <p>Êúà„ÅÇ„Åü„ÇäÁ¥Ñ <strong>¬•{economic_benefits["monthly_benefit"]:,}</strong> „ÅÆÂåªÁôÇË≤ªÂâäÊ∏õÂäπÊûú„Å´Áõ∏ÂΩì„Åó„Åæ„Åô„ÄÇ</p>
        </div>
    </div>
    '''
    
    # Â∞ÜÊù•„Ç∑„Éä„É™„Ç™ÊØîËºÉ
    filtered_scenarios = scenarios[scenarios.apply(lambda x: x['applies_to_age_min'] <= age <= x['applies_to_age_max'], axis=1)]
    
    if not filtered_scenarios.empty:
        html += '''
        <div class="section">
            <h2>Â∞ÜÊù•„Ç∑„Éä„É™„Ç™ÊØîËºÉ</h2>
            <p>ÁüØÊ≠£Ê≤ªÁôÇ„ÇíÂèó„Åë„ÅüÂ†¥Âêà„Å®Âèó„Åë„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆÂ∞ÜÊù•‰∫àÊ∏¨Ôºö</p>
            <table class="comparison-table">
                <tr>
                    <th>ÊúüÈñì</th>
                    <th>ÁüØÊ≠£„Åó„ÅüÂ†¥Âêà</th>
                    <th>ÁüØÊ≠£„Åó„Å™„Åã„Å£„ÅüÂ†¥Âêà</th>
                </tr>
        '''
        
        for _, row in filtered_scenarios.iterrows():
            html += f'''
            <tr>
                <td>{row['timeframe']}</td>
                <td class="comparison-good">{row['with_ortho_text_ja']}</td>
                <td class="comparison-bad">{row['without_ortho_text_ja']}</td>
            </tr>
            '''
        
        html += '</table></div>'
    
    # ÂêÑÊ≠ØÂàóÂïèÈ°å„ÅÆË©≥Á¥∞
    for i, issue_id in enumerate(issue_ids):
        issue_name = issue_names[i]
        effects_df = effects_data.get(issue_id)
        
        if effects_df is not None and not effects_df.empty:
            html += f'<div class="section"><h2>{issue_name}„ÅÆ„É™„Çπ„ÇØË©ï‰æ°</h2>'
            
            # ÂäπÊûú„Éª„É°„É™„ÉÉ„Éà„ÅÆË°®Á§∫
            benefits = effects_df[effects_df['effect_direction'] == 'decrease']
            if not benefits.empty:
                html += '<div class="benefit"><strong>ÁüØÊ≠£„Å´„Çà„ÇãÊîπÂñÑÂäπÊûú:</strong><ul>'
                for _, row in benefits.iterrows():
                    html += f'<li>{row["description_ja"]}</li>'
                html += '</ul></div>'
            
            # „É™„Çπ„ÇØÈ†ÖÁõÆ„ÅÆË°®Á§∫
            risks = effects_df[effects_df['effect_direction'] == 'increase']
            if not risks.empty:
                for _, row in risks.iterrows():
                    risk_class = "high-risk" if row['effect_value'] > 30 else "risk-item"
                    html += f'<div class="{risk_class}">{row["description_ja"]}</div>'
            
            html += '</div>'
    
    # „Éï„ÉÉ„Çø„Éº
    html += f'''
        <div class="footer">
            Ê≠ØÁßë„Ç®„Éì„Éá„É≥„ÇπÁîüÊàê„Ç∑„Çπ„ÉÜ„É† - „É¨„Éù„Éº„ÉàÁîüÊàêÊó•: {today}
        </div>
        <div class="no-print" style="text-align: center; margin-top: 30px;">
            <button onclick="window.print();" style="padding: 10px 20px; background-color: #0066cc; color: white; border: none; border-radius: 4px; cursor: pointer;">
                Âç∞Âà∑„Åô„Çã / PDF„Å®„Åó„Å¶‰øùÂ≠ò
            </button>
        </div>
    </body>
    </html>
    '''
    
    return html

# HTML„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂèØËÉΩ„Å´„Åô„ÇãÈñ¢Êï∞
def get_html_download_link(html, filename):
    b64 = base64.b64encode(html.encode()).decode()
    href = f'<a href="data:text/html;base64,{b64}" download="{filename}" style="display: inline-block; padding: 10px 15px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 4px; margin: 10px 0;">HTML„É¨„Éù„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</a>'
    return href

# „É°„Ç§„É≥„Éö„Éº„Ç∏
def main():
    # „Çø„Ç§„Éà„É´Ë°®Á§∫
    st.title('ü¶∑ Ê≠ØÁßëÁüØÊ≠£„Ç®„Éì„Éá„É≥„ÇπÁîüÊàê„Ç∑„Çπ„ÉÜ„É†')
    st.write("ÊÇ£ËÄÖ„ÅÆÂπ¥ÈΩ¢„Å®Ê≠ØÂàóÂïèÈ°å„Å´Âü∫„Å•„ÅÑ„Åü„Ç®„Éì„Éá„É≥„Çπ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åô")
    
    # „Çµ„Ç§„Éâ„Éê„Éº„Å´Ë®≠ÂÆö„Ç™„Éó„Ç∑„Éß„É≥
    with st.sidebar:
        st.header("Ë®≠ÂÆö")
        lang = st.selectbox("Ë®ÄË™û", ["Êó•Êú¨Ë™û", "English"], index=0)
        include_citations = st.checkbox("Ë´ñÊñáÂºïÁî®„ÇíÂê´„ÇÅ„Çã", value=True)
        show_ortho_timing = st.checkbox("ÁüØÊ≠£„Çø„Ç§„Éü„É≥„Ç∞ÊÉÖÂ†±„ÇíË°®Á§∫", value=True)
        show_future_scenarios = st.checkbox("Â∞ÜÊù•„Ç∑„Éä„É™„Ç™„ÇíË°®Á§∫", value=True)
        show_economic_benefits = st.checkbox("ÁµåÊ∏àÁöÑ„É°„É™„ÉÉ„Éà„ÇíË°®Á§∫", value=True)
        
        # „Éá„Éº„ÇøÁÆ°ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥
        st.header("„Éá„Éº„ÇøÁÆ°ÁêÜ")
        
        # CSV„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
        papers_csv_exists = os.path.exists('papers.csv')
        
        if papers_csv_exists:
            if st.button("Ë´ñÊñá„Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà"):
                try:
                    processor = st.session_state['processor']
                    with st.spinner("Ë´ñÊñá„Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà‰∏≠..."):
                        count = processor.import_papers_from_csv()
                        st.success(f"{count}‰ª∂„ÅÆË´ñÊñá„Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà„Åó„Åæ„Åó„Åü")
                except Exception as e:
                    st.error(f"„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„Éº: {e}")
                    logger.error(f"„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„Éº: {e}", exc_info=True)
        else:
            st.warning("papers.csv„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        
        # „Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÅÆÁîüÊàê
        if st.button("„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê"):
            try:
                processor = st.session_state['processor']
                with st.spinner("„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê‰∏≠..."):
                    summary = processor.generate_all_evidence_data()
                    
                    # Ë©≥Á¥∞„Å™ÁµêÊûú„ÇíË°®Á§∫
                    details = "\n".join([f"- {k}: {v}‰ª∂" for k, v in summary.items()])
                    st.success(f"„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü\n{details}")
            except Exception as e:
                st.error(f"„Ç®„Éì„Éá„É≥„ÇπÁîüÊàê„Ç®„É©„Éº: {e}")
                logger.error(f"„Ç®„Éì„Éá„É≥„ÇπÁîüÊàê„Ç®„É©„Éº: {e}", exc_info=True)
        
        # CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà
        if st.button("„Éá„Éº„Çø„ÇíCSV„Å´„Ç®„ÇØ„Çπ„Éù„Éº„Éà"):
            try:
                processor = st.session_state['processor']
                with st.spinner("CSV„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê‰∏≠..."):
                    count = processor.export_to_csv()
                    st.success(f"{count}ÂÄã„ÅÆCSV„Éï„Ç°„Ç§„É´„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åæ„Åó„Åü")
            except Exception as e:
                st.error(f"„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº: {e}")
                logger.error(f"„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº: {e}", exc_info=True)
        
        # „Éá„Éº„Çø„Éô„Éº„Çπ„É™„Çª„ÉÉ„ÉàÔºàÂç±Èô∫„Å™Êìç‰ΩúÔºâ
        with st.expander("Âç±Èô∫„Å™Êìç‰Ωú"):
            st.warning("‰ª•‰∏ã„ÅÆÊìç‰Ωú„ÅØ„Éá„Éº„Çø„ÇíÂÆåÂÖ®„Å´ÂâäÈô§„Åó„Åæ„Åô„ÄÇÊ≥®ÊÑè„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            if st.button("„Éá„Éº„Çø„Éô„Éº„Çπ„Çí„É™„Çª„ÉÉ„Éà", key="reset_db"):
                try:
                    processor = st.session_state['processor']
                    with st.spinner("„Éá„Éº„Çø„Éô„Éº„Çπ„Çí„É™„Çª„ÉÉ„Éà‰∏≠..."):
                        processor.reset_database()
                        st.success("„Éá„Éº„Çø„Éô„Éº„Çπ„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü")
                except Exception as e:
                    st.error(f"„É™„Çª„ÉÉ„Éà„Ç®„É©„Éº: {e}")
                    logger.error(f"„É™„Çª„ÉÉ„Éà„Ç®„É©„Éº: {e}", exc_info=True)
    
    # „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ
    col1, col2 = st.columns([2, 1])
    
    try:
        processor = st.session_state['processor']
        
        # Ê≠ØÂàóÂïèÈ°å„É™„Çπ„Éà„ÇíÂèñÂæó
        dental_issues_df = processor.get_dental_issues()
        
        with col1:
            # ÂÖ•Âäõ„Éï„Ç©„Éº„É†
            with st.form("input_form"):
                age = st.number_input('ÊÇ£ËÄÖÂπ¥ÈΩ¢', min_value=1, max_value=100, value=30)
                gender = st.selectbox('ÊÄßÂà•', ['Áî∑ÊÄß', 'Â•≥ÊÄß', '„Åù„ÅÆ‰ªñ'])
                
                # Ê≠ØÂàóÂïèÈ°å„ÅÆÈÅ∏Êäû
                issue_options = [(row['issue_id'], row['issue_name_ja']) for _, row in dental_issues_df.iterrows()]
                selected_issues = st.multiselect('Ê≠ØÂàóÂïèÈ°å', options=issue_options, format_func=lambda x: x[1])
                
                additional_notes = st.text_area("ËøΩÂä†„É°„É¢", placeholder="ÊÇ£ËÄÖ„ÅÆÁâπË®ò‰∫ãÈ†Ö„Åå„ÅÇ„Çå„Å∞ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                submitted = st.form_submit_button("„É¨„Éù„Éº„ÉàÁîüÊàê")
        
        with col2:
            # „Éá„Éº„ÇøÁµ±Ë®àÊÉÖÂ†±
            st.subheader("„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„ÇøÁµ±Ë®à")
            
            try:
                # Ë´ñÊñáÊï∞„ÅÆÂèñÂæó
                conn = sqlite3.connect(processor.db_path)
                cursor = conn.cursor()
                
                cursor.execute("SELECT COUNT(*) FROM research_papers")
                papers_count = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM research_findings")
                findings_count = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM dental_issues")
                issues_count = cursor.fetchone()[0]
                
                conn.close()
                
                # Áµ±Ë®àÊÉÖÂ†±„ÅÆË°®Á§∫
                st.metric("ÁôªÈå≤Ë´ñÊñáÊï∞", papers_count)
                st.metric("ÊäΩÂá∫Áü•Ë¶ãÊï∞", findings_count)
                st.metric("Ê≠ØÂàóÂïèÈ°åÊï∞", issues_count)
                
                # Ê≠ØÂàóÂïèÈ°å„ÅÆÂàÜÂ∏É„Ç∞„É©„Éï
                if not dental_issues_df.empty and papers_count > 0:
                    st.subheader("ÂïèÈ°åÂà•ÈáçÂ§ßÂ∫¶„Çπ„Ç≥„Ç¢")
                    
                    fig = px.bar(
                        dental_issues_df, 
                        x='issue_name_ja', 
                        y='severity_base_score',
                        color='severity_base_score',
                        color_continuous_scale='RdYlBu_r',
                        labels={'issue_name_ja': 'Ê≠ØÂàóÂïèÈ°å', 'severity_base_score': 'ÈáçÂ§ßÂ∫¶„Çπ„Ç≥„Ç¢'}
                    )
                    fig.update_layout(height=300, margin=dict(l=10, r=10, t=10, b=10))
                    st.plotly_chart(fig, use_container_width=True)
            
            except Exception as e:
                st.error(f"„Éá„Éº„ÇøÁµ±Ë®àÂèñÂæó„Ç®„É©„Éº: {e}")
                logger.error(f"„Éá„Éº„ÇøÁµ±Ë®àÂèñÂæó„Ç®„É©„Éº: {e}", exc_info=True)
        
        # „É¨„Éù„Éº„ÉàÁîüÊàê
        if submitted:
            if not selected_issues:
                st.error("Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆÊ≠ØÂàóÂïèÈ°å„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            else:
                issue_ids = [issue[0] for issue in selected_issues]
                issue_names = [issue[1] for issue in selected_issues]
                
                st.success(f"{len(issue_ids)}„Å§„ÅÆÊ≠ØÂàóÂïèÈ°å„Å´Âü∫„Å•„ÅÑ„Åü„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü")
                
                # ÁüØÊ≠£ÂøÖË¶ÅÊÄß„Çπ„Ç≥„Ç¢„ÅÆË®àÁÆó
                necessity_score = processor.calculate_ortho_necessity_score(age, issue_ids)
                
                # ÁµåÊ∏àÁöÑ„É°„É™„ÉÉ„Éà„ÅÆË®àÁÆó
                economic_benefits = processor.get_economic_impact(age)
                
                # Â∞ÜÊù•„Ç∑„Éä„É™„Ç™„ÅÆÂèñÂæó
                scenarios = processor.get_future_scenarios(age=age)
                
                # „Ç®„Éì„Éá„É≥„Çπ„É¨„Éù„Éº„Éà„ÅÆË°®Á§∫
                st.subheader("ÁüØÊ≠£ÂøÖË¶ÅÊÄß„Çπ„Ç≥„Ç¢")
                
                # „Çπ„Ç≥„Ç¢Ë°®Á§∫Áî®„ÅÆÂàó
                score_cols = st.columns(4)
                with score_cols[0]:
                    st.metric("Á∑èÂêà„Çπ„Ç≥„Ç¢", necessity_score['total_score'])
                with score_cols[1]:
                    st.metric("„Çø„Ç§„Éü„É≥„Ç∞„Çπ„Ç≥„Ç¢", necessity_score['timing_score'])
                with score_cols[2]:
                    st.metric("ÈáçÂ§ßÂ∫¶„Çπ„Ç≥„Ç¢", necessity_score['severity_score'])
                with score_cols[3]:
                    st.metric("Â∞ÜÊù•„É™„Çπ„ÇØ„Çπ„Ç≥„Ç¢", necessity_score['risk_score'])
                
                st.info(necessity_score['interpretation'])
                
                # ÂêÑÂïèÈ°å„ÅÆË©≥Á¥∞„ÇíË°®Á§∫
                st.subheader("ÈÅ∏Êäû„Åï„Çå„ÅüÊ≠ØÂàóÂïèÈ°å„ÅÆË©≥Á¥∞")
                
                for i, issue_id in enumerate(issue_ids):
                    with st.expander(f"{issue_names[i]}„ÅÆË©≥Á¥∞"):
                        # ÂäπÊûú„Éá„Éº„Çø„ÅÆÂèñÂæó„Å®Ë°®Á§∫
                        effects_df = processor.get_issue_treatment_effects(issue_id)
                        
                        if not effects_df.empty:
                            # ÂäπÊûú„Å®„É™„Çπ„ÇØ„Å´ÂàÜ„Åë„Çã
                            benefits = effects_df[effects_df['effect_direction'] == 'decrease']
                            risks = effects_df[effects_df['effect_direction'] == 'increase']
                            
                            if not benefits.empty:
                                st.markdown("**ÁüØÊ≠£„Å´„Çà„ÇãÊîπÂñÑÂäπÊûú:**")
                                for _, row in benefits.iterrows():
                                    st.success(row['description_ja'])
                            
                            if not risks.empty:
                                st.markdown("**ÊîæÁΩÆ„Åó„ÅüÂ†¥Âêà„ÅÆ„É™„Çπ„ÇØ:**")
                                for _, row in risks.iterrows():
                                    severity = "error" if row['effect_value'] > 30 else "warning"
                                    getattr(st, severity)(row['description_ja'])
                        else:
                            st.warning("„Åì„ÅÆÂïèÈ°å„Å´Èñ¢„Åô„Çã„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô")
                
                # HTMLÁâà„É¨„Éù„Éº„ÉàÁîüÊàê
                html_report = generate_html_report(
                    age, gender, issue_ids, issue_names, 
                    necessity_score, scenarios, economic_benefits,
                    additional_notes
                )
                
                # „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Éú„Çø„É≥
                st.markdown("<h3>„É¨„Éù„Éº„Éà„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</h3>", unsafe_allow_html=True)
                st.write("‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÂΩ¢Âºè„Åß„É¨„Éù„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åß„Åç„Åæ„ÅôÔºö")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # HTMLÂΩ¢Âºè
                    st.markdown(get_html_download_link(html_report, f"Ê≠ØÁßëÁüØÊ≠£Ë©ï‰æ°_{date.today().strftime('%Y%m%d')}.html"), unsafe_allow_html=True)
                    st.write("‚ÄªHTML„Éï„Ç°„Ç§„É´„Çí„Éñ„É©„Ç¶„Ç∂„ÅßÈñã„Åç„ÄÅÂç∞Âà∑Ê©üËÉΩ„Åã„ÇâPDF„Å®„Åó„Å¶‰øùÂ≠ò„Åß„Åç„Åæ„Åô")
                
                with col2:
                    # JSONÂΩ¢ÂºèÔºà„Éá„Éº„Çø„ÅÆ„ÅøÔºâ
                    report_data = {
                        "patient": {
                            "age": age,
                            "gender": gender,
                            "issues": issue_names,
                            "notes": additional_notes
                        },
                        "necessity_score": necessity_score,
                        "economic_benefits": economic_benefits
                    }
                    
                    json_str = json.dumps(report_data, ensure_ascii=False, indent=2)
                    st.download_button("JSON„Éá„Éº„Çø„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ", json_str, f"Ê≠ØÁßëÁüØÊ≠£Ë©ï‰æ°_{date.today().strftime('%Y%m%d')}.json")
    
    except Exception as e:
        st.error(f"„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
        logger.error(f"„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº: {e}", exc_info=True)
        st.error("„Éá„Éº„Çø„Éô„Éº„Çπ„Å∏„ÅÆÊé•Á∂ö„Å´ÂïèÈ°å„Åå„ÅÇ„Çã„Åã„ÄÅ„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Çµ„Ç§„Éâ„Éê„Éº„ÅÆ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

# „Éá„Éº„ÇøÂàÜÊûê„Éö„Éº„Ç∏
def data_analysis():
    st.title("„Éá„Éº„ÇøÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ")
    st.write("Ê≠ØÁßëÁüØÊ≠£„Ç®„Éì„Éá„É≥„Çπ„ÅÆÂàÜÊûê„Å®ÂèØË¶ñÂåñ")
    
    try:
        processor = st.session_state['processor']
        
        # ÂàÜÊûê„Çø„Ç§„Éó„ÅÆÈÅ∏Êäû
        analysis_type = st.selectbox(
            "ÂàÜÊûê„Çø„Ç§„Éó",
            ["Âπ¥ÈΩ¢Âà•„É™„Çπ„ÇØ", "ÂïèÈ°åÂà•ÂäπÊûú", "„Çø„Ç§„Éü„É≥„Ç∞„É°„É™„ÉÉ„Éà", "ÁµåÊ∏àÁöÑÂΩ±Èüø"]
        )
        
        if analysis_type == "Âπ¥ÈΩ¢Âà•„É™„Çπ„ÇØ":
            # Âπ¥ÈΩ¢Âà•„É™„Çπ„ÇØ„ÅÆÂàÜÊûê
            risk_profiles = processor.get_age_risk_profiles()
            
            if not risk_profiles.empty:
                st.subheader("Âπ¥ÈΩ¢Âà•„ÅÆÊ≠ØÂàóÁüØÊ≠£„É™„Çπ„ÇØ„Éó„É≠„Éï„Ç°„Ç§„É´")
                
                # „É™„Çπ„ÇØÂÄ§„ÅÆ„Ç∞„É©„Éï
                fig = px.line(
                    risk_profiles, 
                    x='age_threshold', 
                    y='risk_value',
                    markers=True,
                    line_shape='spline',
                    labels={'age_threshold': 'Âπ¥ÈΩ¢', 'risk_value': '„É™„Çπ„ÇØÂÄ§ (%)'},
                    title="Âπ¥ÈΩ¢„Å´‰º¥„ÅÜ„É™„Çπ„ÇØÂ¢óÂä†"
                )
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
                
                # „É™„Çπ„ÇØË™¨Êòé„ÅÆË°®Á§∫
                st.subheader("ÂêÑÂπ¥ÈΩ¢ÈñæÂÄ§„Åß„ÅÆ„É™„Çπ„ÇØË™¨Êòé")
                for _, row in risk_profiles.iterrows():
                    st.markdown(f"**{row['age_threshold']}Ê≠≥„ÅÆÈñæÂÄ§:**")
                    st.info(row['description_ja'])
            else:
                st.warning("Âπ¥ÈΩ¢Âà•„É™„Çπ„ÇØ„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        
        elif analysis_type == "ÂïèÈ°åÂà•ÂäπÊûú":
            # ÂïèÈ°åÂà•ÂäπÊûú„ÅÆÂàÜÊûê
            dental_issues = processor.get_dental_issues()
            
            if not dental_issues.empty:
                selected_issue = st.selectbox(
                    "Ê≠ØÂàóÂïèÈ°å„ÇíÈÅ∏Êäû",
                    [(row['issue_id'], row['issue_name_ja']) for _, row in dental_issues.iterrows()],
                    format_func=lambda x: x[1]
                )
                
                if selected_issue:
                    issue_id, issue_name = selected_issue
                    effects_df = processor.get_issue_treatment_effects(issue_id)
                    
                    if not effects_df.empty:
                        st.subheader(f"{issue_name}„ÅÆÁüØÊ≠£ÂäπÊûúÂàÜÊûê")
                        
                        # ÂäπÊûú„ÅÆ„Ç∞„É©„ÉïÂåñ
                        effects_df['abs_effect'] = effects_df['effect_value'].abs()
                        effects_df['effect_type'] = effects_df.apply(
                            lambda x: 'ÊîπÂñÑÂäπÊûú' if x['effect_direction'] == 'decrease' else '„É™„Çπ„ÇØ',
                            axis=1
                        )
                        
                        fig = px.bar(
                            effects_df,
                            x='effect_category',
                            y='abs_effect',
                            color='effect_type',
                            color_discrete_map={'ÊîπÂñÑÂäπÊûú': '#4CAF50', '„É™„Çπ„ÇØ': '#F44336'},
                            labels={'effect_category': '„Ç´„ÉÜ„Ç¥„É™', 'abs_effect': 'ÂäπÊûú„ÅÆÂ§ß„Åç„Åï (%)'},
                            title=f"{issue_name}„Å´Èñ¢ÈÄ£„Åô„ÇãÂäπÊûú„Å®„É™„Çπ„ÇØ"
                        )
                        fig.update_layout(height=400)
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # ÂäπÊûú„ÅÆË©≥Á¥∞Ë°®Á§∫
                        st.subheader("ÂäπÊûú„ÅÆË©≥Á¥∞")
                        
                        benefits = effects_df[effects_df['effect_direction'] == 'decrease']
                        risks = effects_df[effects_df['effect_direction'] == 'increase']
                        
                        if not benefits.empty:
                            st.markdown("**ÁüØÊ≠£„Å´„Çà„ÇãÊîπÂñÑÂäπÊûú:**")
                            for _, row in benefits.iterrows():
                                st.success(row['description_ja'])
                        
                        if not risks.empty:
                            st.markdown("**ÊîæÁΩÆ„Åó„ÅüÂ†¥Âêà„ÅÆ„É™„Çπ„ÇØ:**")
                            for _, row in risks.iterrows():
                                st.error(row['description_ja'])
                    else:
                        st.warning(f"{issue_name}„Å´Èñ¢„Åô„Çã„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
            else:
                st.warning("Ê≠ØÂàóÂïèÈ°å„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        
        elif analysis_type == "„Çø„Ç§„Éü„É≥„Ç∞„É°„É™„ÉÉ„Éà":
            # „Çø„Ç§„Éü„É≥„Ç∞„É°„É™„ÉÉ„Éà„ÅÆÂàÜÊûê
            timing_benefits = processor.get_age_timing_benefits()
            
            if not timing_benefits.empty:
                st.subheader("Âπ¥ÈΩ¢„Ç∞„É´„Éº„ÉóÂà•„ÅÆÁüØÊ≠£„Çø„Ç§„Éü„É≥„Ç∞ÂäπÊûú")
                
                # „Çø„Ç§„Éü„É≥„Ç∞„Çπ„Ç≥„Ç¢„ÅÆ„Ç∞„É©„Éï
                fig = px.bar(
                    timing_benefits,
                    x='age_group_ja',
                    y='timing_score',
                    color='recommendation_level',
                    labels={'age_group_ja': 'Âπ¥ÈΩ¢„Ç∞„É´„Éº„Éó', 'timing_score': '„Çø„Ç§„Éü„É≥„Ç∞„Çπ„Ç≥„Ç¢'},
                    title="Âπ¥ÈΩ¢„Ç∞„É´„Éº„Éó„Åî„Å®„ÅÆÁüØÊ≠£„Çø„Ç§„Éü„É≥„Ç∞ÈÅ©Ê≠£Â∫¶"
                )
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
                
                # „Çø„Ç§„Éü„É≥„Ç∞„É°„É™„ÉÉ„Éà„ÅÆË©≥Á¥∞
                st.subheader("ÂêÑÂπ¥ÈΩ¢„Ç∞„É´„Éº„Éó„ÅÆ„Çø„Ç§„Éü„É≥„Ç∞„É°„É™„ÉÉ„Éà")
                for _, row in timing_benefits.iterrows():
                    with st.expander(f"{row['age_group_ja']} ({row['recommendation_level']})"):
                        st.markdown(f"**Êé®Â•®„É¨„Éô„É´:** {row['recommendation_level']}")
                        st.markdown(f"**„Çø„Ç§„Éü„É≥„Ç∞„Çπ„Ç≥„Ç¢:** {row['timing_score']}/100")
                        st.info(row['benefit_text_ja'])
            else:
                st.warning("„Çø„Ç§„Éü„É≥„Ç∞„É°„É™„ÉÉ„Éà„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        
        elif analysis_type == "ÁµåÊ∏àÁöÑÂΩ±Èüø":
            # ÁµåÊ∏àÁöÑÂΩ±Èüø„ÅÆÂàÜÊûê
            conn = sqlite3.connect(processor.db_path)
            economic_impacts = pd.read_sql_query("SELECT * FROM economic_impacts", conn)
            conn.close()
            
            if not economic_impacts.empty:
                st.subheader("ÁüØÊ≠£Ê≤ªÁôÇ„ÅÆÁµåÊ∏àÁöÑÂΩ±ÈüøÂàÜÊûê")
                
                # ÁµåÊ∏àÁöÑ„É°„É™„ÉÉ„Éà„ÅÆ„Ç∞„É©„Éï
                economic_impacts['net_benefit'] = economic_impacts['future_savings'] - economic_impacts['current_cost']
                
                # Ê£í„Ç∞„É©„Éï„ÅßË°®Á§∫
                fig = go.Figure()
                
                fig.add_trace(go.Bar(
                    x=economic_impacts['age_group_ja'],
                    y=economic_impacts['current_cost'],
                    name='ÁèæÂú®„ÅÆÁüØÊ≠£„Ç≥„Çπ„Éà',
                    marker_color='#FF9800'
                ))
                
                fig.add_trace(go.Bar(
                    x=economic_impacts['age_group_ja'],
                    y=economic_impacts['future_savings'],
                    name='Â∞ÜÊù•„ÅÆÂåªÁôÇË≤ªÂâäÊ∏õÈ°ç',
                    marker_color='#4CAF50'
                ))
                
                fig.update_layout(
                    title='Âπ¥ÈΩ¢„Ç∞„É´„Éº„ÉóÂà•„ÅÆÁüØÊ≠£„Ç≥„Çπ„Éà„Å®Â∞ÜÊù•„ÅÆÁØÄÁ¥ÑÈ°ç',
                    xaxis_title='Âπ¥ÈΩ¢„Ç∞„É´„Éº„Éó',
                    yaxis_title='ÈáëÈ°ç (ÂÜÜ)',
                    barmode='group',
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # ROI„ÅÆ„Ç∞„É©„Éï
                fig2 = px.line(
                    economic_impacts,
                    x='age_group_ja',
                    y='roi',
                    markers=True,
                    labels={'age_group_ja': 'Âπ¥ÈΩ¢„Ç∞„É´„Éº„Éó', 'roi': 'ÊäïË≥áÂèéÁõäÁéá (%)'},
                    title="Âπ¥ÈΩ¢„Ç∞„É´„Éº„ÉóÂà•„ÅÆÊäïË≥áÂèéÁõäÁéáÔºàROIÔºâ"
                )
                fig2.update_layout(height=350)
                st.plotly_chart(fig2, use_container_width=True)
                
                # ÁµåÊ∏àÁöÑ„É°„É™„ÉÉ„Éà„ÅÆË©≥Á¥∞
                st.subheader("ÂêÑÂπ¥ÈΩ¢„Ç∞„É´„Éº„Éó„ÅÆÁµåÊ∏àÁöÑË©≥Á¥∞")
                for _, row in economic_impacts.iterrows():
                    with st.expander(f"{row['age_group_ja']}"):
                        st.markdown(f"**ÁèæÂú®„ÅÆÁüØÊ≠£„Ç≥„Çπ„Éà:** ¬•{row['current_cost']:,}")
                        st.markdown(f"**Â∞ÜÊù•„ÅÆÂåªÁôÇË≤ªÂâäÊ∏õÈ°ç:** ¬•{row['future_savings']:,}")
                        st.markdown(f"**Á¥îÁØÄÁ¥ÑÈ°ç:** ¬•{row['future_savings'] - row['current_cost']:,}")
                        st.markdown(f"**ÊäïË≥áÂèéÁõäÁéá (ROI):** {row['roi']:.1f}%")
            else:
                st.warning("ÁµåÊ∏àÁöÑÂΩ±Èüø„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    
    except Exception as e:
        st.error(f"ÂàÜÊûê„Ç®„É©„Éº: {e}")
        logger.error(f"ÂàÜÊûê„Ç®„É©„Éº: {e}", exc_info=True)
        st.error("„Éá„Éº„Çø„Éô„Éº„Çπ„Å∏„ÅÆÊé•Á∂ö„Å´ÂïèÈ°å„Åå„ÅÇ„Çã„Åã„ÄÅ„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Çµ„Ç§„Éâ„Éê„Éº„ÅÆ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

# PubMedÈÄ£Êê∫„Éö„Éº„Ç∏
def pubmed_integration():
    st.title("PubMedË´ñÊñá„Éá„Éº„ÇøÈÄ£Êê∫")
    st.write("PubMed API„Çí‰ΩøÁî®„Åó„Å¶ÊúÄÊñ∞„ÅÆÁ†îÁ©∂Ë´ñÊñá„ÇíÂèñÂæó„ÉªÂàÜÈ°û„Åó„Åæ„Åô")
    
    # PubMed APIÈñ¢ÈÄ£„ÅÆ„É¢„Ç∏„É•„Éº„É´„Çí„Ç§„É≥„Éù„Éº„Éà
    api_modules_imported = False
    try:
        from pubmed_api import fetch_pubmed_studies, get_pubmed_article_details, update_papers_csv
        api_modules_imported = True
    except ImportError as e:
        st.error(f"pubmed_api.py„É¢„Ç∏„É•„Éº„É´„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„Éº: {str(e)}")
        api_modules_imported = False
    
    if not api_modules_imported:
        st.error("PubMed APIÈÄ£Êê∫„É¢„Ç∏„É•„Éº„É´„Åå„Ç§„É≥„Éù„Éº„Éà„Åß„Åç„Åæ„Åõ„Çì„ÄÇpubmed_api.py„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        return
    
    # Ê§úÁ¥¢„Éï„Ç©„Éº„É†
    with st.form("pubmed_search_form"):
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            search_keyword = st.text_input("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ", "malocclusion OR orthodontic")
        with col2:
            max_results = st.number_input("ÊúÄÂ§ßÂèñÂæó‰ª∂Êï∞", min_value=1, max_value=50, value=10)
        with col3:
            days_recent = st.slider("ÊúüÈñìÔºàÊó•Ôºâ", 30, 365, 90)
        
        search_button = st.form_submit_button("Ë´ñÊñá„ÇíÊ§úÁ¥¢")
    
    if search_button:
        with st.spinner("PubMed„Åã„ÇâË´ñÊñá„ÇíÊ§úÁ¥¢‰∏≠..."):
            # Ê§úÁ¥¢ÂÆüË°å
            search_results = fetch_pubmed_studies(search_keyword, max_results, days_recent)
            
            if 'esearchresult' in search_results and 'idlist' in search_results['esearchresult']:
                pmid_list = search_results['esearchresult']['idlist']
                
                if pmid_list:
                    st.success(f"{len(pmid_list)}‰ª∂„ÅÆË´ñÊñá„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü")
                    
                    # Ë´ñÊñáË©≥Á¥∞„ÅÆÂèñÂæó
                    with st.spinner("Ë´ñÊñá„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠..."):
                        articles = get_pubmed_article_details(pmid_list)
                        
                        if articles:
                            # Ë´ñÊñá‰∏ÄË¶ß„ÇíË°®Á§∫
                            st.subheader("ÂèñÂæó„Åó„ÅüË´ñÊñá")
                            
                            for i, article in enumerate(articles):
                                with st.expander(f"{i+1}. {article.get('title', '‰∏çÊòé')}"):
                                    st.markdown(f"**ËëóËÄÖ:** {article.get('authors', '‰∏çÊòé')}")
                                    st.markdown(f"**Êé≤ËºâË™å:** {article.get('journal', '‰∏çÊòé')} ({article.get('publication_year', '‰∏çÊòé')})")
                                    st.markdown(f"**DOI:** {article.get('doi', '‰∏çÊòé')}")
                                    st.markdown(f"**Á†îÁ©∂„Çø„Ç§„Éó:** {article.get('study_type', '‰∏çÊòé')}")
                                    
                                    # „Ç®„Éì„Éá„É≥„Çπ„É¨„Éô„É´„ÅÆË°®Á§∫
                                    if 'evidence_level' in article:
                                        evidence_level = article['evidence_level']
                                        evidence_colors = {
                                            '1a': '#4CAF50', '1b': '#8BC34A',
                                            '2a': '#FFC107', '2b': '#FF9800',
                                            '3': '#FF5722', '4': '#F44336',
                                            '5': '#9E9E9E'
                                        }
                                        evidence_texts = {
                                            '1a': '„É°„ÇøÂàÜÊûê/„Ç∑„Çπ„ÉÜ„Éû„ÉÜ„Ç£„ÉÉ„ÇØ„É¨„Éì„É•„Éº',
                                            '1b': '„É©„É≥„ÉÄ„É†ÂåñÊØîËºÉË©¶È®ì',
                                            '2a': '„Ç≥„Éõ„Éº„ÉàÁ†îÁ©∂',
                                            '2b': 'Áóá‰æãÂØæÁÖßÁ†îÁ©∂/Ëá®Â∫äË©¶È®ì',
                                            '3': 'Ê®™Êñ≠Á†îÁ©∂/ÂÆüÈ®ìÁ†îÁ©∂',
                                            '4': 'Áóá‰æãÂ†±Âëä/Áóá‰æã„Ç∑„É™„Éº„Ç∫',
                                            '5': 'Â∞ÇÈñÄÂÆ∂ÊÑèË¶ã/‰∏çÊòé'
                                        }
                                        
                                        st.markdown(
                                            f"**„Ç®„Éì„Éá„É≥„Çπ„É¨„Éô„É´:** <span style='color:{evidence_colors.get(evidence_level, '#9E9E9E')};'>"
                                            f"„É¨„Éô„É´ {evidence_level} ({evidence_texts.get(evidence_level, '‰∏çÊòé')})</span>",
                                            unsafe_allow_html=True
                                        )
                                    
                                    # ÊäÑÈå≤„ÅÆË°®Á§∫
                                    if 'abstract' in article and article['abstract']:
                                        with st.expander("ÊäÑÈå≤"):
                                            st.write(article['abstract'])
                                    
                                    # PubMed„É™„É≥„ÇØ
                                    if 'url' in article:
                                        st.markdown(f"[PubMed„ÅßË°®Á§∫]({article['url']})")
                            
                            # CSV„Å´‰øùÂ≠ò„Åô„Çã„Åã„ÅÆÁ¢∫Ë™ç
                            if st.button("„Åì„Çå„Çâ„ÅÆË´ñÊñá„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´ËøΩÂä†"):
                                with st.spinner("Ë´ñÊñá„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´ËøΩÂä†‰∏≠..."):
                                    try:
                                        # „Éó„É≠„Çª„ÉÉ„Çµ„Çí‰ΩøÁî®„Åó„Å¶CSV„ÇíÊõ¥Êñ∞
                                        processor = st.session_state['processor']
                                        
                                        # Ë´ñÊñá„ÅÆÁõ¥Êé•ÊåøÂÖ•
                                        count = 0
                                        for article in articles:
                                            paper_id = processor._insert_paper(article)
                                            if paper_id:
                                                count += 1
                                        
                                        processor.conn.commit()
                                        st.success(f"{count}‰ª∂„ÅÆË´ñÊñá„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü")
                                        
                                        # „Ç®„Éì„Éá„É≥„Çπ„ÅÆÂÜçÁîüÊàê„ÇíÊé®Â•®
                                        st.info("Ë´ñÊñá„ÅÆËøΩÂä†Âæå„ÅØ„ÄÅ„Çµ„Ç§„Éâ„Éê„Éº„ÅÆ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ")
                                    except Exception as e:
                                        st.error(f"„Éá„Éº„Çø„Éô„Éº„ÇπËøΩÂä†„Ç®„É©„Éº: {e}")
                                        logger.error(f"„Éá„Éº„Çø„Éô„Éº„ÇπËøΩÂä†„Ç®„É©„Éº: {e}", exc_info=True)
                        else:
                            st.warning("Ë´ñÊñá„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")
                else:
                    st.warning("Ë©≤ÂΩì„Åô„ÇãË´ñÊñá„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            else:
                st.error("PubMed„ÅÆÊ§úÁ¥¢„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    
    # „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥
    st.subheader("Ë´ñÊñá„ÅÆ‰∏ÄÊã¨ÂèñÂæó")
    st.write("Ë§áÊï∞„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Çí‰ΩøÁî®„Åó„Å¶Ë´ñÊñá„Çí‰∏ÄÊã¨ÂèñÂæó„Åó„Åæ„Åô")
    
    with st.form("pubmed_batch_form"):
        # „Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆË®≠ÂÆö
        default_keywords = """dental crowding evidence
open bite treatment orthodontic
deep bite treatment orthodontic
crossbite treatment evidence
overjet treatment orthodontic
underbite treatment evidence"""
        
        keywords_text = st.text_area(
            "Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„ÉâÔºà1Ë°å„Å´1„Å§Ôºâ",
            value=default_keywords,
            height=150
        )
        
        col1, col2 = st.columns(2)
        with col1:
            batch_max_results = st.number_input("„Ç≠„Éº„ÉØ„Éº„Éâ„Åî„Å®„ÅÆÊúÄÂ§ßÂèñÂæóÊï∞", min_value=1, max_value=30, value=5)
        with col2:
            batch_days_recent = st.slider("ÊúüÈñìÔºàÊó•Ôºâ", 30, 365, 180, key="batch_days")
        
        batch_button = st.form_submit_button("‰∏ÄÊã¨ÂèñÂæóÈñãÂßã")
    
    if batch_button:
        keywords = [k.strip() for k in keywords_text.split('\n') if k.strip()]
        
        if keywords:
            st.write(f"**{len(keywords)}ÂÄã**„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Çí‰ΩøÁî®„Åó„Å¶„ÄÅ„Ç≠„Éº„ÉØ„Éº„Éâ„Åî„Å®„Å´ÊúÄÂ§ß**{batch_max_results}‰ª∂**„ÅÆË´ñÊñá„ÇíÂèñÂæó„Åó„Åæ„Åô")
            
            # ÈÄ≤ÊçóË°®Á§∫Áî®„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº
            progress_placeholder = st.empty()
            log_placeholder = st.empty()
            
            with st.spinner("Ë´ñÊñá„Éá„Éº„ÇøÂèñÂæó‰∏≠..."):
                # ÈÄ≤Êçó„Éê„Éº„ÅÆÂàùÊúüÂåñ
                progress_bar = progress_placeholder.progress(0)
                
                # „Ç´„Ç¶„É≥„Çø„ÉºÂàùÊúüÂåñ
                total_articles = 0
                total_new_articles = 0
                
                try:
                    processor = st.session_state['processor']
                    
                    # „Ç≠„Éº„ÉØ„Éº„Éâ„Åî„Å®„Å´Âá¶ÁêÜ
                    for i, keyword in enumerate(keywords):
                        # ÈÄ≤ÊçóÊõ¥Êñ∞
                        progress = (i / len(keywords))
                        progress_bar.progress(progress)
                        
                        # „Ç≠„Éº„ÉØ„Éº„ÉâË°®Á§∫
                        log_placeholder.markdown(f"**Âá¶ÁêÜ‰∏≠:** '{keyword}' ({i+1}/{len(keywords)})")
                        
                        try:
                            # Ê§úÁ¥¢ÂÆüË°å
                            search_results = fetch_pubmed_studies(keyword, batch_max_results, batch_days_recent)
                            
                            if 'esearchresult' in search_results and 'idlist' in search_results['esearchresult']:
                                pmid_list = search_results['esearchresult']['idlist']
                                
                                if pmid_list:
                                    log_placeholder.markdown(f"  **{len(pmid_list)}‰ª∂**„ÅÆË´ñÊñá„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü")
                                    
                                    # Ë´ñÊñáË©≥Á¥∞„ÅÆÂèñÂæó
                                    articles = get_pubmed_article_details(pmid_list)
                                    
                                    # „Éá„Éº„Çø„Éô„Éº„Çπ„Å´ËøΩÂä†
                                    if articles:
                                        # Êõ¥Êñ∞Ââç„ÅÆ„Çµ„Ç§„Ç∫„ÇíË®òÈå≤
                                        conn = sqlite3.connect(processor.db_path)
                                        cursor = conn.cursor()
                                        cursor.execute("SELECT COUNT(*) FROM research_papers")
                                        old_size = cursor.fetchone()[0]
                                        conn.close()
                                        
                                        # Ë´ñÊñá„ÅÆÊåøÂÖ•
                                        new_count = 0
                                        for article in articles:
                                            paper_id = processor._insert_paper(article)
                                            if paper_id:
                                                new_count += 1
                                        
                                        # Â§âÊõ¥„Çí‰øùÂ≠ò
                                        processor.conn.commit()
                                        
                                        total_articles += len(articles)
                                        total_new_articles += new_count
                                        
                                        log_placeholder.markdown(f"  **{new_count}‰ª∂**„ÅÆÊñ∞Ë¶èË´ñÊñá„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü")
                                    else:
                                        log_placeholder.warning("  Ë´ñÊñáË©≥Á¥∞„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
                                else:
                                    log_placeholder.info("  Ë©≤ÂΩì„Åô„ÇãË´ñÊñá„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
                            else:
                                log_placeholder.error(f"  Ê§úÁ¥¢ÁµêÊûú„ÅåÁÑ°Âäπ„Å™ÂΩ¢Âºè„Åß„Åô")
                        
                        except Exception as e:
                            log_placeholder.error(f"  „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
                            logger.error(f"„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Ç®„É©„Éº: {e}", exc_info=True)
                        
                        # APIÂà∂ÈôêÂØæÁ≠ñ„ÅÆÂæÖÊ©üÔºàÊúÄÂæå„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Åß„ÅØ‰∏çË¶ÅÔºâ
                        if i < len(keywords) - 1:
                            import time
                            time.sleep(2)  # 2ÁßíÂæÖÊ©ü
                    
                    # ÂÆå‰∫Ü
                    progress_bar.progress(1.0)
                    
                    # ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
                    st.success(f"„Éá„Éº„ÇøÂèñÂæó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü! {total_new_articles}‰ª∂„ÅÆÊñ∞„Åó„ÅÑË´ñÊñá„Åå„Éá„Éº„Çø„Éô„Éº„Çπ„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü„ÄÇ")
                    
                    # „Ç®„Éì„Éá„É≥„Çπ„ÅÆÂÜçÁîüÊàê„ÇíÊé®Â•®
                    st.info("Ë´ñÊñá„ÅÆËøΩÂä†Âæå„ÅØ„ÄÅ„Çµ„Ç§„Éâ„Éê„Éº„ÅÆ„Äå„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Ç®„Éì„Éá„É≥„Çπ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åô„Çã„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô„ÄÇ")
                
                except Exception as e:
                    st.error(f"‰∏ÄÊã¨ÂèñÂæó„Ç®„É©„Éº: {e}")
                    logger.error(f"‰∏ÄÊã¨ÂèñÂæó„Ç®„É©„Éº: {e}", exc_info=True)
        else:
            st.error("„Ç≠„Éº„ÉØ„Éº„Éâ„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")

# „Éû„É´„ÉÅ„Éö„Éº„Ç∏„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
def run():
    # „Çµ„Ç§„Éâ„Éê„Éº„Å´„Éö„Éº„Ç∏ÈÅ∏Êäû„ÇíËøΩÂä†
    st.sidebar.title("„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥")
    page = st.sidebar.radio(
        "„Éö„Éº„Ç∏ÈÅ∏Êäû",
        ["„É¨„Éù„Éº„ÉàÁîüÊàê", "„Éá„Éº„ÇøÂàÜÊûê", "PubMedÈÄ£Êê∫"]
    )
    
    # ÈÅ∏Êäû„Åó„Åü„Éö„Éº„Ç∏„ÇíË°®Á§∫
    if page == "„É¨„Éù„Éº„ÉàÁîüÊàê":
        main()
    elif page == "„Éá„Éº„ÇøÂàÜÊûê":
        data_analysis()
    elif page == "PubMedÈÄ£Êê∫":
        pubmed_integration()

if __name__ == "__main__":
    run()
